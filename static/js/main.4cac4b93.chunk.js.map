{"version":3,"sources":["components/Section/Section.module.css","redux/contacts/contact-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem.js","redux/contacts/contact-selectors.js","components/ContactList/ContactList.js","components/ContactList/Filter.js","components/Section/Section.js","App.js","reportWebVitals.js","redux/contacts/contact-reducer.js","redux/store.js","index.js","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactActions","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","ContactForm","dispatch","useDispatch","useState","setName","setNumber","handleChange","event","currentTarget","value","console","warn","reset","onSubmit","preventDefault","actions","className","styles","title","button","type","onChange","pattern","required","small","ContactItem","contactlist__item","button__delete","onClick","getContactsTotal","state","contacts","items","length","getContactsFiltered","getContacts","filter","getFilter","contact","includes","ContactList","useSelector","style","color","fontSize","map","Filter","message","e","Section","children","section","container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","some","alert","_","toLowerCase","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","midleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4cac4b93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1zblB\",\"container\":\"Section_container__3mAyL\"};","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n//import types from './contact-types';\r\n\r\n//const addContact = createAction(types.ADD,)\r\n\r\n\r\nconst addContact = createAction('contacts/add', (name, number) => ({\r\n    payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n    },\r\n  }\r\n));\r\n\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contscts/changeFilter');\r\n\r\nconst contactActions = {\r\n    addContact, \r\n    deleteContact, \r\n    changeFilter\r\n  };\r\n\r\nexport default contactActions;\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId,\r\n// });\r\n\r\n\r\n// const changeFilter = text => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: text,\r\n// });","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions from '../../redux/contacts/contact-actions';\nimport styles from './ContactForm.module.css';\n\nfunction ContactForm() {\n\n  const dispatch = useDispatch();\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.warn(`Type of input cannot be handled!`);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    //onFormSubmit(this.state);\n    dispatch(actions.addContact(name, number));\n    reset();\n  };\n\n  const reset = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label className={styles.title}>\n          Name\n          <input\n            className={styles.button}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className={styles.title}>\n          Number\n          <input\n            className={styles.button}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={styles.button + ' ' + styles.small}>\n          Сохранить\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onNewContactAdd: PropTypes.func,\n};\n\n/*class ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.props.onFormSubmit(this.state);\n    this.props.onNewContactAdd(this.state.name, this.state.number);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label className={styles.title}>\n            Name\n            <input\n              className={styles.button}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label className={styles.title}>\n            Number\n            <input\n              className={styles.button}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n\n          <button type=\"submit\" className={styles.button + ' ' + styles.small}>\n            Сохранить\n          </button>\n        </form>\n      </div>\n    );\n  }\n}*/\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions from '../../redux/contacts/contact-actions';\nimport styles from './ContactList.module.css';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <li className={styles.contactlist__item}>\n      <p>\n        {name}, {number}\n      </p>\n      <button\n        type=\"button\"\n        className={styles.button__delete}\n        onClick={() => dispatch(actions.deleteContact(id))}\n      >\n        Удалить\n      </button>\n    </li>\n  )\n};\n\nContactItem.propTypes = {\n  id: PropTypes.any.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","export const getContactsTotal = state => state.contacts.items.length;\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getContactsFiltered = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n       \r\n    return contacts.filter(contact => contact.name.includes(filter))};","import ContactItem from './ContactItem';\n\nimport { useSelector } from 'react-redux';\nimport { getContactsTotal, getContactsFiltered } from '../../redux/contacts/contact-selectors';\n\nimport styles from './ContactList.module.css';\n\n\n\nconst ContactList = () => {\n\n  \n  const contacts = useSelector(getContactsFiltered);\n  \n  return (\n  <div>\n    <p className={styles.title}>Contact list. <span style={{color:'white', fontSize:'16px'}}>Total contacts {useSelector(getContactsTotal)}</span> :</p>\n    <ul>\n      {contacts.map(({ name, number, id }) => {\n        return (\n          <ContactItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n          />\n        );\n      })}\n    </ul>\n  </div>\n)\n};\n\n\n\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport actions from '../../redux/contacts/contact-actions';\n\nimport styles from './ContactList.module.css';\n\nconst Filter = ({ message }) => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <p className={styles.contactlist__item}>{message}</p>\n      <input\n        className={styles.button}\n        type=\"text\"\n        onChange={e => dispatch(actions.changeFilter(e.currentTarget.value))}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </div>\n  )\n};\n\nFilter.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <div className={styles.section + ' ' + styles.container}>\n    {title && <h2> {title}</h2>}\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n};\n\nexport default Section;\n","//import { useEffect, useState } from 'react';\n//import { v4 as uuidv4 } from 'uuid';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/ContactList/Filter';\nimport Section from './components/Section/Section';\n\nimport './App.css';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Section title=\"Phonebook\">\n        <ContactForm\n          //onFormSubmit={formSubmitHandler}\n          //onNewContactAdd={addNewContact}\n        />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter\n          message=\"Find contacts by name\"\n        />\n\n        <ContactList />\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n\n//===============hooks=======\n// const [contacts, setContacts] = useState([\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ]);\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   const storedContacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(storedContacts);\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   //console.log('comp upd', this.state.contacts);\n\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // // hook updated\n  // const handleChangeFilter = event => {\n  //   setFilter(event.currentTarget.value);\n  // };\n\n  // // const formSubmitHandler = data => {\n  // //   console.log('formSubmitHandler data:', data);\n  // // };\n\n  // const addNewContact = (newName, newNumber) => {\n  //   const isNew = contacts.some(({ name }) => name === newName);\n  //   if (isNew) {\n  //     alert(`${newName} is already in contacts.`);\n  //     return;\n  //   }\n\n  //   if (newName && newNumber) {\n  //     const newContact = { id: uuidv4(), name: newName, number: newNumber };\n  //     setContacts(prevState => [newContact, ...prevState]);\n  //   }\n  //   // console.log('newName, newNumber', newName, newNumber);\n  // };\n\n  // const getFilteredContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(({ name }) =>\n  //     name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // const deleteContactHandler = contactId => {\n  //   //console.log('id called: ', contactId);\n  //   setContacts(contacts => contacts.filter(({ id }) => id !== contactId));\n  // };\n\n  // console.log('uuidv4():',uuidv4());\n  // console.log('this.state.name:',this.state.name);\n  // console.log('this.state.number:',this.state.number);\n\n\n\n//===classes====================================================================\n/*function App() {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.any.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }),\n    ),\n    filter: PropTypes.string,\n  };\n\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    name: '',\n    number: '',\n    filter: '',\n  };\n\n  componentDidMount() {\n    const storedContacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(storedContacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('comp upd', this.state.contacts);\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleChangeFilter = event => {\n    const { value } = event.currentTarget;\n    this.setState({ filter: value });\n  };\n\n  formSubmitHandler = data => {\n    console.log('formSubmitHandler data:', data);\n  };\n\n  addNewContact = (newName, newNumber) => {\n    const isNew = this.state.contacts.some(({ name }) => name === newName);\n    if (isNew) {\n      alert(`${newName} is already in contacts.`);\n      return;\n    }\n\n    if (newName && newNumber) {\n      const newContact = { id: uuidv4(), name: newName, number: newNumber };\n      this.setState(prevState => ({\n        contacts: [newContact, ...prevState.contacts],\n      }));\n    }\n    // console.log('newName, newNumber', newName, newNumber);\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContactHandler = contactId => {\n    console.log('id called: ', contactId);\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(({ id }) => id !== contactId),\n    }));\n  };\n\n  render() {\n    // console.log('uuidv4():',uuidv4());\n    // console.log('this.state.name:',this.state.name);\n    // console.log('this.state.number:',this.state.number);\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Phonebook\">\n          <ContactForm\n            onFormSubmit={this.formSubmitHandler}\n            onNewContactAdd={this.addNewContact}\n          />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <Filter\n            message=\"Find contacts by name\"\n            filter={this.state.filter}\n            onChange={this.handleChangeFilter}\n          />\n\n          <ContactList\n            contacts={this.getFilteredContacts()}\n            onDeleteCont={this.deleteContactHandler}\n          />\n        </Section>\n      </div>\n    );\n  }\n} */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\n//import types from './contacts/contact-types';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contact-actions';\r\n// {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: ''\r\n//   }\r\n// }\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => {\r\n        const isNew = state.some(contact => contact.name === payload.name);\r\n            if (isNew) { \r\n                alert(`${payload.name} is already in contacts.`);\r\n                return;  //return state; ?\r\n            }\r\n                      \r\n            return [...state, payload]; \r\n    },\r\n    [actions.deleteContact]: (state, { payload }) => {\r\n        return state.filter(({id}) => id !== payload);\r\n    }\r\n});\r\n           \r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => {\r\n        return payload.toLowerCase();\r\n    }\r\n});\r\n\r\nexport default combineReducers({ items, filter });","//import { combineReducers } from 'redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n//import logger from 'redux-logger';\r\n//import { composeWithDevTools } from 'redux-devtools-extension';   ---у тулкита под капотом\r\n\r\nimport contactsReducer from './contacts/contact-reducer';\r\nimport { logger } from 'redux-logger';\r\nimport {\r\n    persistStore, \r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER, \r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n    },\r\n    midleware:(getDefaultMiddleware) => getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }).concat(logger),\r\n    devTools: process.env.NODE_ENV === 'development',   //devTools: true -- it goes by default\r\n    \r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst persStore = { store, persistor };\r\n\r\nexport default persStore;\r\n\r\n\r\n//const reducer = (state = {}, action) => state;\r\n//const rootReducer = combineReducers({\r\n//})\r\n// const store = createStore(reducer,\r\n//   composeWithDevTools()\r\n//     // other store enhancers if any\r\n// );\r\n//console.log(process.env.NODE_ENV);\r\n//const middleware = [...getDefaultMiddleware(), logger];","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\n\n//console.log('store', store);\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<h2>Data upload from LocalStorage...</h2>} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactlist__item\":\"ContactList_contactlist__item__NgZKw\",\"title\":\"ContactList_title__2oUU0\",\"button\":\"ContactList_button__22af6\",\"button__delete\":\"ContactList_button__delete__3oxNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__2BmDi\",\"small\":\"ContactForm_small__3bW0T\",\"title\":\"ContactForm_title__Bc2nX\"};"],"sourceRoot":""}